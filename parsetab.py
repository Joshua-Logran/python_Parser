
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIVIDE EXPONENT IDENTIFIER INCLUDE KEYWORD LITERAL MINUS MODULUS NUMBER OPERATOR PLUS PUNCTUATION TIMESprogram : INCLUDE functionfunction : KEYWORD IDENTIFIER PUNCTUATION PUNCTUATION blockblock : PUNCTUATION declarations statements return_statement PUNCTUATIONdeclarations : declaration PUNCTUATION\n                    | declarations declaration PUNCTUATIONdeclaration : KEYWORD IDENTIFIERstatements : statement PUNCTUATION\n                  | statements statement PUNCTUATIONoperation : NUMBER PLUS NUMBER\n                 | NUMBER MINUS NUMBER\n                 | NUMBER TIMES NUMBER\n                 | NUMBER DIVIDE NUMBER\n                 | NUMBER MODULUS NUMBER\n                 | NUMBER EXPONENT NUMBERstatement : assignment_statement\n                 | IDENTIFIER PUNCTUATION LITERAL PUNCTUATION\n                 | assignment_operation assignment_statement : IDENTIFIER OPERATOR NUMBER \n                             | IDENTIFIER OPERATOR LITERALassignment_operation : IDENTIFIER OPERATOR operationreturn_statement : KEYWORD NUMBER PUNCTUATION'
    
_lr_action_items = {'INCLUDE':([0,],[2,]),'$end':([1,3,9,28,],[0,-1,-2,-3,]),'KEYWORD':([2,8,10,13,19,24,25,29,],[4,12,12,23,-4,-5,-7,-8,]),'IDENTIFIER':([4,10,12,13,19,24,25,29,],[5,16,20,16,-4,-5,-7,-8,]),'PUNCTUATION':([5,6,7,11,14,15,16,17,18,20,21,22,30,31,32,33,34,35,36,43,44,45,46,47,48,],[6,7,8,19,24,25,26,-15,-17,-6,28,29,35,36,-18,-19,-20,-21,-16,-9,-10,-11,-12,-13,-14,]),'OPERATOR':([16,],[27,]),'NUMBER':([23,27,37,38,39,40,41,42,],[30,32,43,44,45,46,47,48,]),'LITERAL':([26,27,],[31,33,]),'PLUS':([32,],[37,]),'MINUS':([32,],[38,]),'TIMES':([32,],[39,]),'DIVIDE':([32,],[40,]),'MODULUS':([32,],[41,]),'EXPONENT':([32,],[42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function':([2,],[3,]),'block':([7,],[9,]),'declarations':([8,],[10,]),'declaration':([8,10,],[11,14,]),'statements':([10,],[13,]),'statement':([10,13,],[15,22,]),'assignment_statement':([10,13,],[17,17,]),'assignment_operation':([10,13,],[18,18,]),'return_statement':([13,],[21,]),'operation':([27,],[34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> INCLUDE function','program',2,'p_program','parser.py',78),
  ('function -> KEYWORD IDENTIFIER PUNCTUATION PUNCTUATION block','function',5,'p_function','parser.py',82),
  ('block -> PUNCTUATION declarations statements return_statement PUNCTUATION','block',5,'p_block','parser.py',86),
  ('declarations -> declaration PUNCTUATION','declarations',2,'p_declarations','parser.py',90),
  ('declarations -> declarations declaration PUNCTUATION','declarations',3,'p_declarations','parser.py',91),
  ('declaration -> KEYWORD IDENTIFIER','declaration',2,'p_declaration','parser.py',95),
  ('statements -> statement PUNCTUATION','statements',2,'p_statements','parser.py',107),
  ('statements -> statements statement PUNCTUATION','statements',3,'p_statements','parser.py',108),
  ('operation -> NUMBER PLUS NUMBER','operation',3,'p_operation','parser.py',112),
  ('operation -> NUMBER MINUS NUMBER','operation',3,'p_operation','parser.py',113),
  ('operation -> NUMBER TIMES NUMBER','operation',3,'p_operation','parser.py',114),
  ('operation -> NUMBER DIVIDE NUMBER','operation',3,'p_operation','parser.py',115),
  ('operation -> NUMBER MODULUS NUMBER','operation',3,'p_operation','parser.py',116),
  ('operation -> NUMBER EXPONENT NUMBER','operation',3,'p_operation','parser.py',117),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',135),
  ('statement -> IDENTIFIER PUNCTUATION LITERAL PUNCTUATION','statement',4,'p_statement','parser.py',136),
  ('statement -> assignment_operation','statement',1,'p_statement','parser.py',137),
  ('assignment_statement -> IDENTIFIER OPERATOR NUMBER','assignment_statement',3,'p_assignment_statement','parser.py',141),
  ('assignment_statement -> IDENTIFIER OPERATOR LITERAL','assignment_statement',3,'p_assignment_statement','parser.py',142),
  ('assignment_operation -> IDENTIFIER OPERATOR operation','assignment_operation',3,'p_assignment_operation','parser.py',157),
  ('return_statement -> KEYWORD NUMBER PUNCTUATION','return_statement',3,'p_return_statement','parser.py',171),
]
